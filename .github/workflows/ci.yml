name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Code Quality & Testing
  quality:
    name: 🔍 Code Quality & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🧹 Run linter
      run: npm run lint

    - name: 🎨 Check code formatting
      run: npm run format -- --check

    - name: 🔍 Run type check
      run: npm run type-check

    - name: 🏗️ Build project
      run: npm run build

    - name: 📊 Upload build artifacts
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🛡️ Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Production Deployment
  deploy:
    name: 🚀 Deploy to Production
    needs: [quality, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🏗️ Build project
      run: npm run build

    - name: 🚀 Deploy to Vercel
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    - name: 📢 Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi

  # Preview Deployment for PRs
  preview:
    name: 🔍 Deploy Preview
    needs: [quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🏗️ Build project
      run: npm run build

    - name: 🔍 Deploy Preview to Vercel
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # Status Check
  status:
    name: 📊 Pipeline Status
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: always()

    steps:
    - name: 📊 Check pipeline status
      run: |
        echo "Quality: ${{ needs.quality.result }}"
        echo "Security: ${{ needs.security.result }}"

        if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
          echo "✅ All checks passed!"
          exit 0
        else
          echo "❌ Some checks failed!"
          exit 1
        fi
